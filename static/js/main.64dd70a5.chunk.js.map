{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robots","cardComponents","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAgBeA,EAbF,SAACC,GAEV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,WAC1D,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCMXC,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIE,KAAOG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAGnF,OACI,6BACKG,ICDEK,EARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,6BACA,2BAAOd,UAAW,mCAAmCe,KAAK,SAASC,YAAa,gBAAgBC,SAAUH,MCUnGI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAC9DvB,EAAMwB,WCeJC,G,wDAtBX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACD0B,MAAQ,CACTC,UAAU,GAHA,E,8DAQAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,wDAGAG,KAAK9B,MAAMwB,a,GAlBHQ,cCuDZC,E,kDA5Cb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAdzC,EAAKZ,MAAQ,CACXlB,OAAQ,GACR4B,YAAa,IAJJ,E,gEASQ,IAAD,OAElBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC7EF,MAAK,SAAAG,GAAK,OAAK,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BAQhC,IAAD,SACwBb,KAAKJ,MAC7BkB,GAFA,EACCpC,OADD,EACS4B,YACQN,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAAC,GAC9C,OAAOA,EAAMzC,KAAK0C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,mBAGlE,OAAgC,IAA7BjB,KAAKJ,MAAMlB,OAAOyC,OACZ,wBAAIhD,UAAU,MAAd,WAGL,yBAAKA,UAAW,MACd,wBAAIA,UAAW,iBAAf,eACA,kBAAC,EAAD,CAAWc,aAAgBe,KAAKI,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,OAASoC,W,GAtCbZ,a,MCEEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACT,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.64dd70a5.chunk.js","sourcesContent":["import React from 'react'; //This is to let understand JSX\r\n//For React you must return only one element, in this case is a Div only which contains several\r\n\r\nconst Card = (props) => {\r\n    // const {name, email, id} = props; //Destructuring, optional, you can straight put these without the props on the input parameter above as well\r\n    return(\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${props.id}?100x100`} alt=\"robots\"/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    const cardComponents = robots.map((user, i) => {\r\n        return <Card key={i} id={robots[i].id} name= {robots[i].name} email={robots[i].email} />\r\n        //You will get some error without key props, without it browser wont know what had been done to it\r\n    })\r\n    return (\r\n        <div>\r\n            {cardComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div>\r\n        <input className= 'pa3 ba b--green bg-lightest-blue' type='search' placeholder= \"Search Robots\" onChange={searchChange}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n//Every props has children actually\r\n//you can consolelog props.children\r\n//Every single component in React got children even you dont put in property\r\n//in jsx if you do styling, need use double bracket {{}} for object\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    //React 16 introduce this\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        else {\r\n            return this.props.children\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, {Component}  from 'react';\nimport CardList from '../components/CardList';\nimport {robots} from '../components/robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n//How the Searchbox can commnicate with cardlist? Use State\n//State is something that can change and affect app\nclass App extends Component {\n  \n  //Constructor to set State\n  constructor(){\n    super()\n    this.state = {\n      robots: [], //Normally in real life we wont have preset array of data\n      searchField: '',\n    }\n  }\n\n//In React, there is a lifecycle, certain functions will always be executed, eg: render(), componentDidMount() etc.\n  componentDidMount() {\n    //fetch is window object, meant to grab something from server\n    fetch('https://jsonplaceholder.typicode.com/users').then(response => response.json())\n    .then(users =>  this.setState({robots: users}));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value})//This is naturally in React, always use this\n  }\n//Notice the scroll is closing tag\n//Important note: Props, State, Children\n  render(){\n    const {robots, searchField} = this.state; // By doing this then no need keep repeat this.state below\n    const filteredRobots = this.state.robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n    })\n    //Worry if API call too slow\n    if(this.state.robots.length === 0){\n      return <h1 className='tc'>Loading</h1>\n    }else {\n      return (\n        <div className= 'tc'>\n          <h1 className= 'lightest-blue'>RoboFriends</h1>\n          <SearchBox searchChange = {this.onSearchChange}/>\n          <Scroll> \n            <ErrorBoundry>\n            <CardList robots= {filteredRobots}/>\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      )\n    }\n\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'; //React is view library, it not only used for browser, can used in mobile phone, VR\nimport ReactDOM from 'react-dom'; //used for DOM \nimport './index.css'; //  ./ means in same directory\n// import App from './App';// This is from App.js, if no write any extension it auto detect as JS file\n//You can create customized Component. Example import Hello from './Hello'\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport {robots} from './components/robots' //You have to destructure it because u not exporting default like the Card above\n\n//You can give property to the tag: greeting, and check the hello.js\nReactDOM.render(\n<App />, document.getElementById('root')\n);\n//You can customize the <App /> to your own too\n/* ReactDOM.render(\n  <React.StrictMode>\n    <Hello />                  <<<<See this\n  </React.StrictMode>,\n  document.getElementById('root')\n); */\n//install tachyons, it helps easier styling with their own class\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}